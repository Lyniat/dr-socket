function(get_platform)
    if(ZIG_TARGET)
        message("Set ${ZIG_TARGET} as target os by using Zig for compiling.")
        set(THIRD_PARTY_TYPE zig-${ZIG_TARGET}-${CMAKE_BUILD_TYPE})
        set(META_PLATFORM \"Zig-${ZIG_TARGET}\")
        message(FATAL_ERROR "Unsupported platform!")
    elseif(EMSCRIPTEN)
        message(FATAL_ERROR "Emscripten is currently not supported and will probably never be. Sorry :(")
    elseif(RASPBERRY_PI)
        message(FATAL_ERROR "Raspberry Pi is currently not supported.")
        #message("User set Raspberry Pi as target OS.")
        set(THIRD_PARTY_TYPE linux-raspberrypi-${CMAKE_BUILD_TYPE})
        set(META_PLATFORM \"linux-raspberrypi\")
    elseif(WIN32)
        message("Found Windows as OS.")
        set(THIRD_PARTY_TYPE windows-amd64-${CMAKE_BUILD_TYPE})
        set(META_PLATFORM \"Windows_amd64\")
    elseif(APPLE)
        if(APPLE_IOS)
            message("User set iOS as target OS.")
            set(THIRD_PARTY_TYPE ios-device-${CMAKE_BUILD_TYPE})
            set(META_PLATFORM \"iOS_arm64\")
            #set(CMAKE_OSX_SYSROOT "/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk")
            set(CMAKE_OSX_SYSROOT "/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk")
            message(FATAL_ERROR "Unsupported platform!")
        elseif (CMAKE_OSX_ARCHITECTURES MATCHES "x86_64")
            message("Found macOS (Intel) as target OS.")
            set(THIRD_PARTY_TYPE macos-x86_64-${CMAKE_BUILD_TYPE})
            set(META_PLATFORM \"macOS_amd64\")
        else()
            message("Found macOS (Apple Silicon) as target OS.")
            set(THIRD_PARTY_TYPE macos-arm64-${CMAKE_BUILD_TYPE})
            set(META_PLATFORM \"macOS_arm64\")
        endif()
    elseif(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
        message("Found Linux as target OS.")
        set(THIRD_PARTY_TYPE linux-amd64-${CMAKE_BUILD_TYPE})
        set(META_PLATFORM \"Linux_amd64\")
        set(LINUX TRUE)
    elseif(ANDROID)
        set(THIRD_PARTY_TYPE android-${ANDROID_ABI}-${CMAKE_BUILD_TYPE})
        if(${ANDROID_ABI} MATCHES "arm64-v8a")
            set(ANDROID_TYPE android-arm64)
        elseif(${ANDROID_ABI} MATCHES "armeabi-v7a")
            set(ANDROID_TYPE android-arm32)
        elseif(${ANDROID_ABI} MATCHES "x86_64")
            set(ANDROID_TYPE android-amd64)
        elseif(${ANDROID_ABI} MATCHES "x86")
            set(ANDROID_TYPE android-x86)
        else()
            message(FATAL_ERROR "Unsupported Android ABI ${ANDROID_ABI}.")
        endif()
        message("User set Android ${ANDROID_TYPE} as target OS.")
        set(META_PLATFORM \"Android-${ANDROID_TYPE}\")
        set(CMAKE_C_COMPILER_WORKS 1)
        set(CMAKE_CXX_COMPILER_WORKS 1)
        message(FATAL_ERROR "Unsupported platform!")
    else()
        message(FATAL_ERROR "Unsupported platform!")
    endif()

    set_property(GLOBAL PROPERTY THIRD_PARTY_TYPE ${THIRD_PARTY_TYPE})
    set_property(GLOBAL PROPERTY META_PLATFORM ${META_PLATFORM})
endfunction()